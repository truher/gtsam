# Nightly build for Raspberry Pi
# Uploads to test.pypi.org.

name: ARM Nightly

on: [workflow_dispatch]

env:
  IMG: raspios_lite_arm64:latest
  BIND: true
  CPU: cortex-a76

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     python_version: ['3.9', '3.10', '3.11', '3.12']


    # env:
    #   # quote the number because yaml thinks 3.10 and 3.1 are the same, like it's a number, man.
    #   # https://yaml.org/spec/1.2.2/ the yaml spec is 50 pages
    #   PYTHON_VERSION: '3.11'
    #   # PYTHON_VERSION: ${{matrix.python_version}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run on ARM
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: $IMG
          bind_mount_repository: $BIND
          cpu: $CPU
          commands: |
            cat /proc/cpuinfo

      # - name: Setup Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.11'
      #     # python-version: ${{matrix.python_version}}

      - name: Install 1
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: $IMG
          bind_mount_repository: $BIND
          cpu: $CPU
          commands: |
            sudo apt-get -y update

      # - name: Install 2
      #   run: sudo apt-get -y install cmake build-essential pkg-config python3-numpy libboost-all-dev ninja-build

      # - name: Install 3
      #   run: sudo apt-get install -y g++ g++-multilib

      # - name: Install g++
      #   run: sudo apt-get install -y g++-aarch64-linux-gnu

      # - name: Install gcc
      #   run: sudo apt-get install -y gcc-aarch64-linux-gnu

      # - name: Set compiler env
      #   run: |
      #     echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      #     echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      # - name: Set Swap Space (Linux)
      #   uses: pierotofy/set-swap-space@master
      #   with:
      #     swap-size-gb: 6

      # - name: Install System Dependencies
      #   run: |
      #     bash .github/scripts/python.sh -d

      # - name: Install Python Dependencies
      #   shell: bash
      #   run: python3 -m pip install -r python/dev_requirements.txt

      # - name: Set Nightly Flag
      #   run: echo "NIGHTLY=1" >> $GITHUB_ENV

      # - name: Build
      #   # Builds the cmake "python-install" target which is a local install.
      #   shell: bash
      #   run: |
      #     bash .github/scripts/python.sh -b

      # - name: Test
      #   # Uses the local install for python3 -m unittest.
      #   shell: bash
      #   run: |
      #     bash .github/scripts/python.sh -t

      # - name: Install Build Tools
      #   run: python3 -m pip install --upgrade pip auditwheel

      # - name: Build for Publishing
      #   run: python3 -m pip wheel build/python -w build/python/dist

      # - name: ldd
      #   run: ldd --version

      # - name: Repair Wheels
      #   run: python3 -m auditwheel repair --plat manylinux_2_35_aarch64 -w build/python/repaired/ build/python/dist/truher_gtsam_nightly*

      # - name: ls
      #   run: ls -R build/python

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     # TODO: define the name as ENV, use it in CMakeLists.txt 
      #     name: artifact311
      #     # name: artifact${{matrix.python_version}}
      #     path: build/python/repaired/truher_gtsam_nightly*
      

  # upload_all:
  #   # Waits for all the builds to finish
  #   # Downloads all their wheels
  #   # Uploads them all at once.
  #   name: Upload All
  #   needs: build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist/
  #         merge-multiple: true

  #     - name: Publish
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         packages-dir: dist/
  #         repository-url: https://test.pypi.org/legacy/